import numpy as np
from src import Functions  # Assuming Functions is your utils.py module

def linear_kernel(X, Z, delta):
    """
    Linear kernel with delta normalization.
    
    Parameters:
        X (np.ndarray): First data matrix (n_samples x n_features)
        Z (np.ndarray): Second data matrix (m_samples x n_features)
        delta (np.ndarray): Delta normalization vector
        
    Returns:
        np.ndarray: Kernel matrix (n_samples x m_samples)
    """
    delta_inv = Functions.compute_delta_inverse(delta)
    X_scaled = X * delta_inv
    Z_scaled = Z * delta_inv
    return X_scaled @ Z_scaled.T


def polynomial_kernel(X, Z, degree=3, coef0=1.0, gamma=1.0):
    """
    Polynomial kernel for matrices X and Z.
    
    K[i,j] = (gamma * X[i]·Z[j]^T + coef0)^degree
    """
    return (gamma * np.dot(X, Z.T) + coef0) ** degree


def rbf_kernel(X, Y, gamma=0.05):
    """Compute RBF kernel matrix for sklearn SVC."""
    n_X = X.shape[0]
    n_Y = Y.shape[0]
    K = np.empty((n_X, n_Y))
    for i in range(n_X):
        for j in range(n_Y):
            K[i, j] = np.exp(-gamma * np.sum((X[i] - Y[j]) ** 2))
    return K



def sigmoid_kernel(X, Z, gamma=0.1, coef0=0.0):
    """
    Sigmoid kernel for matrices X and Z.
    
    K[i,j] = tanh(gamma * X[i]·Z[j]^T + coef0)
    """
    return np.tanh(gamma * np.dot(X, Z.T) + coef0)
