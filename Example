# -----------------------------
# 1️⃣ Imports
import sys
sys.path.append("..", "data", "heart.csv")  # Path to folder containing 'src'
# -----------------------------
import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import StratifiedKFold
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

from src.svm import LpLinftySVM
from src import Kernels
# -----------------------------
# 2️⃣ Load and preprocess data
# -----------------------------
df = pd.read_csv(r"data_path")


# Features and labels
X = df.iloc[:, :-2].to_numpy()
y = df['Class'].to_numpy()

# Standardize features
scaler = StandardScaler()
X = scaler.fit_transform(X)

# -----------------------------
# 4️⃣ Test model on a small fold
# -----------------------------
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, stratify=y, random_state=42
)


# Initialize SVM
clf = LpLinftySVM(C=3, b=0.0, kernel=Kernels.rbf_kernel, p=0.2)

# Train on small fold
clf.fit(X_train, y_train, X_test)
y_pred = clf.predict()

print("Predictions on small fold:", y_pred)

# -----------------------------
# 5️⃣ Full K-Fold evaluation
# -----------------------------
skf = StratifiedKFold(n_splits=15, shuffle=True, random_state=42)

best_f1 = 0
best_metrics = None

for train_index, test_index in skf.split(X, y):
    X_train, X_test = X[train_index], X[test_index]
    y_train, y_test = y[train_index], y[test_index]

    # Initialize and train model
    clf = LpLinftySVM(C=3, b=0.0, kernel=Kernels.linear_kernel, p=0.2)
    clf.fit(X_train, y_train, X_test)
    y_pred = clf.predict()

    metrics = {
        'accuracy': accuracy_score(y_test, y_pred),
        'precision': precision_score(y_test, y_pred, pos_label=1),
        'recall': recall_score(y_test, y_pred, pos_label=1),
        'f1': f1_score(y_test, y_pred, pos_label=1)
    }

    if metrics['f1'] > best_f1:
        best_f1 = metrics['f1']
        best_metrics = metrics

# -----------------------------
# 6️⃣ Show best metrics
# -----------------------------
print(f"Accuracy:  {best_metrics['accuracy']:.3f}")
print(f"Precision: {best_metrics['precision']:.3f}")
print(f"Recall:    {best_metrics['recall']:.3f}")
print(f"F1-score:  {best_metrics['f1']:.3f}")
